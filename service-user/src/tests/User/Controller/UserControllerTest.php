<?php

namespace App\Tests\User\Controller;

use App\User\Domain\Entity\User;
use Ramsey\Uuid\Uuid;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserControllerTest extends WebTestCase
{

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

//        $this->client = static::createClient();
//        $this->container = $this->client->getContainer();
//        $this->entityManager = $this->container->get('doctrine.orm.entity_manager');
//        $this->passwordHasher = $this->container->get(UserPasswordHasherInterface::class);
//
//        $user = new User();
//        $user->setUUID(Uuid::uuid4());
//        $user->setFirstName('john');
//        $user->setLastName('travlota');
//        $user->setEmail('john.travolta@example.com');
//        $user->setPassword('qwerty', $this->passwordHasher);
//        $user->setActive(true);
//        $user->setRoles(['ROLE_USER']);
//        $this->entityManager->persist($user);
//        $this->entityManager->flush();
    }

    public function testIndex(): void
    {
        $client = static::createClient();
        $client->request('GET', '/api/users');
        $this->assertContains($client->getResponse()->getStatusCode(), [Response::HTTP_OK, Response::HTTP_INTERNAL_SERVER_ERROR]);
        $this->assertJson($client->getResponse()->getContent());
        $this->assertArrayHasKey('data', json_decode($client->getResponse()->getContent(), true));
    }

    public function testShowAndUserByUuidNotFound(): void
    {
        $client = static::createClient();
        $uuid = 'non-existent-uuid';
        $client->request('GET', '/api/users/' . $uuid);
        $this->assertEquals(Response::HTTP_INTERNAL_SERVER_ERROR, $client->getResponse()->getStatusCode());
        $this->assertJson($client->getResponse()->getContent());
        $this->assertArrayHasKey('errors', json_decode($client->getResponse()->getContent(), true));
    }

    public function testShow()
    {
        $client = static::createClient();

        $uuid = '3f7f5015-e86e-454e-8244-865591667b0c';
        $client->request('GET', '/api/users/' . $uuid);
        $this->assertSame(Response::HTTP_OK, $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'));
        $responseData = json_decode($client->getResponse()->getContent(), true);
        $this->assertArrayHasKey('data', $responseData);
    }

    //TODO nie dziaÅ‚a tylko na testach - dlaczego ???
//    public function testCreateUser()
//    {
//        $client = static::createClient();
//        $client->request(
//            'POST',
//            '/api/users',
//            [],
//            [],
//            ['CONTENT_TYPE' => 'application/json'],
//            json_encode(['firstName' => 'John',
//                'lastName' => 'Doe',
//                'email' => 'john.doe12@example.com',
//                'phone' => '123456789',
//                'password' => 'password123',
//                'active' => true,
//                'roles' => ['ROLE_USER']
//            ])
//        );
//
//        $this->assertSame(Response::HTTP_OK, $client->getResponse()->getStatusCode());
//        $this->assertTrue($client->getResponse()->headers->contains('Content-Type', 'application/json'));
//        $responseData = json_decode($client->getResponse()->getContent(), true);
//        $this->assertArrayHasKey('data', $responseData);
//        $this->assertEquals('User has been created.', $responseData['data']);
//    }
}