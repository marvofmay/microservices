<?php

namespace Container626UDEk;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUserControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'App\User\Presentation\API\UserController' shared autowired service.
     *
     * @return \App\User\Presentation\API\UserController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/src/User/Presentation/API/UserController.php';
        include_once \dirname(__DIR__, 4).'/src/User/Presentation/Validation/User/Register/RegisterValidationRequest.php';
        include_once \dirname(__DIR__, 4).'/src/User/Presentation/Validation/User/Register/RegisterValidation.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Request.php';
        include_once \dirname(__DIR__, 4).'/src/User/Presentation/Request/User/RegisterRequest.php';
        include_once \dirname(__DIR__, 4).'/src/User/Domain/Action/User/RegisterUserAction.php';

        $a = new \App\User\Presentation\Request\User\RegisterRequest();

        $container->services['App\\User\\Presentation\\API\\UserController'] = $instance = new \App\User\Presentation\API\UserController(new \App\User\Presentation\Validation\User\Register\RegisterValidationRequest(new \App\User\Presentation\Validation\User\Register\RegisterValidation(($container->privates['validator'] ?? self::getValidatorService($container)), $a)), new \App\User\Domain\Action\User\RegisterUserAction(($container->services['messenger.default_bus'] ?? $container->load('getMessenger_DefaultBusService')), $a), ($container->privates['App\\User\\Domain\\Service\\ReaderService\\UserReaderService'] ?? $container->load('getUserReaderServiceService')), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->privates['security.user_password_hasher'] ?? $container->load('getSecurity_UserPasswordHasherService')));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
            'security.authorization_checker' => ['privates', 'security.authorization_checker', 'getSecurity_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['privates', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', true],
            'security.token_storage' => ['privates', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'serializer' => ['privates', 'serializer', 'getSerializerService', false],
        ], [
            'http_kernel' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.token_storage' => '?',
            'serializer' => '?',
        ]))->withContext('App\\User\\Presentation\\API\\UserController', $container));

        return $instance;
    }
}
